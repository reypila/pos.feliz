/**
 * Created by Voltron on 12/05/2017.
 */
const validator = require('validator');
const usermodel = require('../models/users.model');
const crypto = require('../util/crypto.util');
const userEntity = require('../models/users.model');
const users_catalogdetails = require('../models/catalogdetails.model');
const enums = require('../util/enum.util');
const email = require('../util/email.util');
const responseutil = require('../util/response.util');

// => users
module.exports = {
    Create: function (req, res) {
        if (!req.body.email || !req.body.pwd || !validator.isEmail(req.body.email)) {
            let tmp = '* Email y Contrase√±a es requerido ';
            res.writeHead(400, {
                "Content-Type": "text/html; charset=utf-8"
            });
            res.write('<html><head><title>400</title><body>400: Bad Request</body> <br/> ' + tmp + '</head>');
            res.end();
        } else {
            let tmppwd = crypto.encrypt(req.body.pwd);
            let query = userEntity.find({ EMAIL: req.body.email });

            query.exec(function (err, docs) {
                if (err) {
                    console.log('error' + err);
                    responseutil.Send(res,400,'',false,('error' + err),'','');
                }

                if (docs.length >= 1) {
                    // exist user\
                    let indice = docs[0]._doc._id;
                   // res.status(400).send('Usuario ya existe');
                    responseutil.Send(res,400,'',false,'Usuario ya existe','','');
                } else {
                    let user = userEntity({
                        EMAIL: req.body.email,
                        PWD: tmppwd,
                        NAME: '',
                        LASTNAME: '',
                        LASTNAME2: '',
                        ALTERNATEMAIL: '',
                        BIRTHDAY: new Date(),
                        RFC: '',
                        CURP: '',
                        GENRE: 0,
                        ZIPCODE: '',
                        HOME_REFERENCE: '',
                        APARTMENT_NUMBER: '',
                        TELEPHONE_NUMBER: '',
                        TELEPHONE_NUMBER2: '',
                        STATUS_ITEM: 1,
                        CREATE_DATE: new Date(),
                        MODIFICATION_DATE: new Date(),
                        MAKER: 'MASTER'
                    });

                    user.save(function (err) {
                        if (err) {
                            // responseutil.Send(res,400,'',false,'Usuario ya existe','','');
                            return err;
                        } else {
                            let promise = new Promise(function (resolve, reject) {
                                email.init(req.body.email);
                            }).then( x=> {
                                responseutil.Send(res,400,'',false,'Usuario ya existe','','');
                                responseutil.Send(res,200)
                                res.status(200).send(JSON.stringify(user));
                            });

                        }
                    });
                }

            });
        }
    },
    GetById: function (req, res, next) {
        usermodel.asynGetByID(req, res, next);

    },
    GetAll: function (req, res, next) {
        usermodel.asyncGetAll(req, res, next);
    },
    Update: function (req, res, next) {
        let iduser = req.params.id;
        if (iduser) {
            // start
            let objUser = {
                "ID": iduser,
                "NAME": req.body.name,
                "LASTNAME": req.body.lastname,
                "ALTERNATEMAIL": req.body.alternatemail,
                "BIRTHDAY": req.body.birthday,
                "RFC": req.body.rfc,
                "CURP": req.body.curp,
                "GENRE": req.body.genre,
                "ZIPCODE": req.body.zipcode,
                "HOME_REFERENCE": req.body.home_reference,
                "APARTMENT_NUMBER": req.body.apartment_number,
                "TELEPHONE_NUMBER": req.body.telephone_number,
                "TELEPHONE_NUMBER2": req.body.telephone_number2
            };
            // end
            usermodel.asyncSet(req, res, next, objUser);
        } else {
            res.status(400).send('id user required');
        }
    },
    UploadImg: function (req, res, next) {

        usermodel.asyncUploadImgDropbox();
        //usermodel.asynUploadImg();
    }


}